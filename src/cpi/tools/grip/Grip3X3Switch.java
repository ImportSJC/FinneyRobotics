package cpi.tools.grip;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.HashMap;

import org.opencv.core.*;
import org.opencv.core.Core.*;
import org.opencv.features2d.FeatureDetector;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.*;
import org.opencv.objdetect.*;

/**
* Grip3X3Switch class.
*
* <p>An OpenCV pipeline generated by GRIP.
*
* @author GRIP
*/
public class Grip3X3Switch {

	//Outputs
	private Mat resizeImage0Output = new Mat();
	private Mat resizeImage1Output = new Mat();
	private Mat resizeImage2Output = new Mat();
	private Mat switch0Output = new Mat();
	private Mat switch1Output = new Mat();
	private Mat switch2Output = new Mat();
	private Mat switch3Output = new Mat();
	private Mat switch4Output = new Mat();
	private Mat switch5Output = new Mat();

	private boolean switch0Switch = true;
	private boolean switch1Switch = true;
	private boolean switch2Switch = true;
	private boolean switch3Switch = true;
	private boolean switch4Switch = true;
	private boolean switch5Switch = true;
	static {
		System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
	}

	/**
	 * This is the primary method that runs the entire pipeline and updates the outputs.
	 */
	public void process(Mat source0, Mat source1, Mat source2) {
		// Step Resize_Image0:
		Mat resizeImage0Input = source0;
		double resizeImage0Width = 640.0;
		double resizeImage0Height = 480.0;
		int resizeImage0Interpolation = Imgproc.INTER_CUBIC;
		resizeImage(resizeImage0Input, resizeImage0Width, resizeImage0Height, resizeImage0Interpolation, resizeImage0Output);

		// Step Resize_Image1:
		Mat resizeImage1Input = source1;
		double resizeImage1Width = 640.0;
		double resizeImage1Height = 480.0;
		int resizeImage1Interpolation = Imgproc.INTER_CUBIC;
		resizeImage(resizeImage1Input, resizeImage1Width, resizeImage1Height, resizeImage1Interpolation, resizeImage1Output);

		// Step Resize_Image2:
		Mat resizeImage2Input = source2;
		double resizeImage2Width = 640.0;
		double resizeImage2Height = 480.0;
		int resizeImage2Interpolation = Imgproc.INTER_CUBIC;
		resizeImage(resizeImage2Input, resizeImage2Width, resizeImage2Height, resizeImage2Interpolation, resizeImage2Output);

		// Step Switch0:
		//Inputs
		Mat switch0IfTrue = resizeImage0Output;
		Mat switch0IfFalse = resizeImage1Output;
		//Output
		Ref<Mat> switch0OutputRef = new Ref<Mat>();
		pipelineSwitch(switch0Switch, switch0IfTrue,
		switch0IfFalse, switch0OutputRef);
		//output assignment
		switch0Output = switch0OutputRef.get();
		// Step Switch1:
		//Inputs
		Mat switch1IfTrue = switch0Output;
		Mat switch1IfFalse = resizeImage2Output;
		//Output
		Ref<Mat> switch1OutputRef = new Ref<Mat>();
		pipelineSwitch(switch1Switch, switch1IfTrue,
		switch1IfFalse, switch1OutputRef);
		//output assignment
		switch1Output = switch1OutputRef.get();
		// Step Switch2:
		//Inputs
		Mat switch2IfTrue = resizeImage0Output;
		Mat switch2IfFalse = resizeImage1Output;
		//Output
		Ref<Mat> switch2OutputRef = new Ref<Mat>();
		pipelineSwitch(switch2Switch, switch2IfTrue,
		switch2IfFalse, switch2OutputRef);
		//output assignment
		switch2Output = switch2OutputRef.get();
		// Step Switch3:
		//Inputs
		Mat switch3IfTrue = switch2Output;
		Mat switch3IfFalse = resizeImage2Output;
		//Output
		Ref<Mat> switch3OutputRef = new Ref<Mat>();
		pipelineSwitch(switch3Switch, switch3IfTrue,
		switch3IfFalse, switch3OutputRef);
		//output assignment
		switch3Output = switch3OutputRef.get();
		// Step Switch4:
		//Inputs
		Mat switch4IfTrue = resizeImage0Output;
		Mat switch4IfFalse = resizeImage1Output;
		//Output
		Ref<Mat> switch4OutputRef = new Ref<Mat>();
		pipelineSwitch(switch4Switch, switch4IfTrue,
		switch4IfFalse, switch4OutputRef);
		//output assignment
		switch4Output = switch4OutputRef.get();
		// Step Switch5:
		//Inputs
		Mat switch5IfTrue = switch4Output;
		Mat switch5IfFalse = resizeImage2Output;
		//Output
		Ref<Mat> switch5OutputRef = new Ref<Mat>();
		pipelineSwitch(switch5Switch, switch5IfTrue,
		switch5IfFalse, switch5OutputRef);
		//output assignment
		switch5Output = switch5OutputRef.get();
	}
	
	public Mat getOutput(){
		return switch5Output;
	}

	/**
	 * This method is a generated setter for the condition of Switch
	 * @param the condition to set
	 */
	 public void setswitch0(boolean value) {
	 	switch0Switch = value;
	 }

	/**
	 * This method is a generated setter for the condition of Switch
	 * @param the condition to set
	 */
	 public void setswitch1(boolean value) {
	 	switch1Switch = value;
	 }

	/**
	 * This method is a generated setter for the condition of Switch
	 * @param the condition to set
	 */
	 public void setswitch2(boolean value) {
	 	switch2Switch = value;
	 }

	/**
	 * This method is a generated setter for the condition of Switch
	 * @param the condition to set
	 */
	 public void setswitch3(boolean value) {
	 	switch3Switch = value;
	 }

	/**
	 * This method is a generated setter for the condition of Switch
	 * @param the condition to set
	 */
	 public void setswitch4(boolean value) {
	 	switch4Switch = value;
	 }

	/**
	 * This method is a generated setter for the condition of Switch
	 * @param the condition to set
	 */
	 public void setswitch5(boolean value) {
	 	switch5Switch = value;
	 }

	/**
	 * This method is a generated getter for the output of a Resize_Image.
	 * @return Mat output from Resize_Image.
	 */
	public Mat resizeImage0Output() {
		return resizeImage0Output;
	}

	/**
	 * This method is a generated getter for the output of a Resize_Image.
	 * @return Mat output from Resize_Image.
	 */
	public Mat resizeImage1Output() {
		return resizeImage1Output;
	}

	/**
	 * This method is a generated getter for the output of a Resize_Image.
	 * @return Mat output from Resize_Image.
	 */
	public Mat resizeImage2Output() {
		return resizeImage2Output;
	}

	/**
	 * This method is a generated getter for the output of a Switch.
	 * @return Mat output from Switch.
	 */
	public Mat switch0Output() {
		return switch0Output;
	}

	/**
	 * This method is a generated getter for the output of a Switch.
	 * @return Mat output from Switch.
	 */
	public Mat switch1Output() {
		return switch1Output;
	}

	/**
	 * This method is a generated getter for the output of a Switch.
	 * @return Mat output from Switch.
	 */
	public Mat switch2Output() {
		return switch2Output;
	}

	/**
	 * This method is a generated getter for the output of a Switch.
	 * @return Mat output from Switch.
	 */
	public Mat switch3Output() {
		return switch3Output;
	}

	/**
	 * This method is a generated getter for the output of a Switch.
	 * @return Mat output from Switch.
	 */
	public Mat switch4Output() {
		return switch4Output;
	}

	/**
	 * This method is a generated getter for the output of a Switch.
	 * @return Mat output from Switch.
	 */
	public Mat switch5Output() {
		return switch5Output;
	}


	/**
	 * Scales and image to an exact size.
	 * @param input The image on which to perform the Resize.
	 * @param width The width of the output in pixels.
	 * @param height The height of the output in pixels.
	 * @param interpolation The type of interpolation.
	 * @param output The image in which to store the output.
	 */
	private void resizeImage(Mat input, double width, double height,
		int interpolation, Mat output) {
		Imgproc.resize(input, output, new Size(width, height), 0.0, 0.0, interpolation);
	}

	/**
	 * Selects an output from two inputs based on a boolean.
	 * @param sw The boolean that determines the output.
	 * @param onTrue The output if sw is true.
	 * @param onFalse The output if sw is false.
	 * @param output The output which is equal to either onTrue or onFalse.
	 */
	private <T> void pipelineSwitch(boolean sw, T onTrue, T onFalse, Ref<T> output) {
		if (sw) {
			output.set(onTrue);
		}
		else {
			output.set(onFalse);
		}
	}


	/**
	 * Enables C-style output parameters in Java to avoid creating custom data classes for each
	 * operation.
	 *
	 * <p>Syntax is {@code Ref<T> varName = new Ref<T>(initValue)}.
	 * Where varName is the name of the variable and initValue is of type T and contains initial value.
	 * </p>
	 * @param <T> The type of object being referenced
	 */
	private static class Ref<T> {
		private T value;

		/**
		 * Constructor for a Ref object.
		 * @param initValue Type T initial value for the object.
		 */
		public Ref(T initValue) {
			value = initValue;
		}

		/**
		 * Constructor for a Ref object without an initial value.
		 * Equivalent to calling Ref(null)
		 */
		public Ref() {
			this(null);
		}

		/**
		 * Sets the object to contain a new value.
		 *
		 * @param newValue the new value being referenced
		 */
		public void set(T newValue) {
			value = newValue;
		}

		/**
		 * Gets the current referenced value
		 *
		 * @return the current referenced value
		 */
		public T get() {
			return value;
		}
	}

}

